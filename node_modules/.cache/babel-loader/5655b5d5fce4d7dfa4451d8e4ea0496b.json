{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _getMatchBounds = _interopRequireDefault(require(\"./getMatchBounds\"));\n\nvar _getOptionLabel = _interopRequireDefault(require(\"./getOptionLabel\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction getHintText(_ref) {\n  var activeItem = _ref.activeItem,\n      initialItem = _ref.initialItem,\n      isFocused = _ref.isFocused,\n      isMenuShown = _ref.isMenuShown,\n      labelKey = _ref.labelKey,\n      multiple = _ref.multiple,\n      selected = _ref.selected,\n      text = _ref.text; // Don't display a hint under the following conditions:\n\n  if ( // No text entered.\n  !text || // The input is not focused.\n  !isFocused || // The menu is hidden.\n  !isMenuShown || // No item in the menu.\n  !initialItem || // The initial item is a custom option.\n  initialItem.customOption || // One of the menu items is active.\n  activeItem || // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n\n  var initialItemStr = (0, _getOptionLabel[\"default\"])(initialItem, labelKey);\n  var bounds = (0, _getMatchBounds[\"default\"])(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nvar _default = getHintText;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-bootstrap-typeahead/lib/utils/getHintText.js"],"names":["Object","defineProperty","exports","value","_getMatchBounds","_interopRequireDefault","require","_getOptionLabel","obj","__esModule","getHintText","_ref","activeItem","initialItem","isFocused","isMenuShown","labelKey","multiple","selected","text","customOption","length","initialItemStr","bounds","toLowerCase","start","slice","end","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,eAAe,GAAGC,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,IAAIC,eAAe,GAAGF,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,SAASE,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAIC,UAAU,GAAGD,IAAI,CAACC,UAAtB;AAAA,MACIC,WAAW,GAAGF,IAAI,CAACE,WADvB;AAAA,MAEIC,SAAS,GAAGH,IAAI,CAACG,SAFrB;AAAA,MAGIC,WAAW,GAAGJ,IAAI,CAACI,WAHvB;AAAA,MAIIC,QAAQ,GAAGL,IAAI,CAACK,QAJpB;AAAA,MAKIC,QAAQ,GAAGN,IAAI,CAACM,QALpB;AAAA,MAMIC,QAAQ,GAAGP,IAAI,CAACO,QANpB;AAAA,MAOIC,IAAI,GAAGR,IAAI,CAACQ,IAPhB,CADyB,CAUzB;;AACA,OAAK;AACL,GAACA,IAAD,IAAS;AACT,GAACL,SADD,IACc;AACd,GAACC,WAFD,IAEgB;AAChB,GAACF,WAHD,IAGgB;AAChBA,EAAAA,WAAW,CAACO,YAJZ,IAI4B;AAC5BR,EAAAA,UALA,IAKc;AACd,GAAC,CAACM,QAAQ,CAACG,MAAX,IAAqB,CAACJ,QAPtB,EAOgC;AAC9B,WAAO,EAAP;AACD;;AAED,MAAIK,cAAc,GAAG,CAAC,GAAGf,eAAe,CAAC,SAAD,CAAnB,EAAgCM,WAAhC,EAA6CG,QAA7C,CAArB;AACA,MAAIO,MAAM,GAAG,CAAC,GAAGnB,eAAe,CAAC,SAAD,CAAnB,EAAgCkB,cAAc,CAACE,WAAf,EAAhC,EAA8DL,IAAI,CAACK,WAAL,EAA9D,CAAb;;AAEA,MAAI,EAAED,MAAM,IAAIA,MAAM,CAACE,KAAP,KAAiB,CAA7B,CAAJ,EAAqC;AACnC,WAAO,EAAP;AACD,GA3BwB,CA2BvB;AACF;;;AAGA,SAAON,IAAI,GAAGG,cAAc,CAACI,KAAf,CAAqBH,MAAM,CAACI,GAA5B,EAAiCL,cAAc,CAACD,MAAhD,CAAd;AACD;;AAED,IAAIO,QAAQ,GAAGlB,WAAf;AACAR,OAAO,CAAC,SAAD,CAAP,GAAqB0B,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _getMatchBounds = _interopRequireDefault(require(\"./getMatchBounds\"));\n\nvar _getOptionLabel = _interopRequireDefault(require(\"./getOptionLabel\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction getHintText(_ref) {\n  var activeItem = _ref.activeItem,\n      initialItem = _ref.initialItem,\n      isFocused = _ref.isFocused,\n      isMenuShown = _ref.isMenuShown,\n      labelKey = _ref.labelKey,\n      multiple = _ref.multiple,\n      selected = _ref.selected,\n      text = _ref.text;\n\n  // Don't display a hint under the following conditions:\n  if ( // No text entered.\n  !text || // The input is not focused.\n  !isFocused || // The menu is hidden.\n  !isMenuShown || // No item in the menu.\n  !initialItem || // The initial item is a custom option.\n  initialItem.customOption || // One of the menu items is active.\n  activeItem || // There's already a selection in single-select mode.\n  !!selected.length && !multiple) {\n    return '';\n  }\n\n  var initialItemStr = (0, _getOptionLabel[\"default\"])(initialItem, labelKey);\n  var bounds = (0, _getMatchBounds[\"default\"])(initialItemStr.toLowerCase(), text.toLowerCase());\n\n  if (!(bounds && bounds.start === 0)) {\n    return '';\n  } // Text matching is case- and accent-insensitive, so to display the hint\n  // correctly, splice the input string with the hint string.\n\n\n  return text + initialItemStr.slice(bounds.end, initialItemStr.length);\n}\n\nvar _default = getHintText;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}