{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _isPlainObject = _interopRequireDefault(require(\"lodash/isPlainObject\"));\n\nvar _getStringLabelKey = _interopRequireDefault(require(\"./getStringLabelKey\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\n\n\nfunction getOptionLabel(option, labelKey) {\n  if (option.paginationOption || option.customOption) {\n    return option[(0, _getStringLabelKey[\"default\"])(labelKey)];\n  }\n\n  var optionLabel;\n\n  if (typeof option === 'string') {\n    optionLabel = option;\n  }\n\n  if (typeof labelKey === 'function') {\n    // This overwrites string options, but we assume the consumer wants to do\n    // something custom if `labelKey` is a function.\n    optionLabel = labelKey(option);\n  } else if (typeof labelKey === 'string' && (0, _isPlainObject[\"default\"])(option)) {\n    optionLabel = option[labelKey];\n  }\n\n  !(typeof optionLabel === 'string') ? process.env.NODE_ENV !== \"production\" ? (0, _invariant[\"default\"])(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : invariant(false) : void 0;\n  return optionLabel;\n}\n\nvar _default = getOptionLabel;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-bootstrap-typeahead/lib/utils/getOptionLabel.js"],"names":["Object","defineProperty","exports","value","_invariant","_interopRequireDefault","require","_isPlainObject","_getStringLabelKey","obj","__esModule","getOptionLabel","option","labelKey","paginationOption","customOption","optionLabel","process","env","NODE_ENV","invariant","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIC,cAAc,GAAGF,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAA3C;;AAEA,IAAIE,kBAAkB,GAAGH,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA/C;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;;;;;;;AAKA,SAASE,cAAT,CAAwBC,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC,MAAID,MAAM,CAACE,gBAAP,IAA2BF,MAAM,CAACG,YAAtC,EAAoD;AAClD,WAAOH,MAAM,CAAC,CAAC,GAAGJ,kBAAkB,CAAC,SAAD,CAAtB,EAAmCK,QAAnC,CAAD,CAAb;AACD;;AAED,MAAIG,WAAJ;;AAEA,MAAI,OAAOJ,MAAP,KAAkB,QAAtB,EAAgC;AAC9BI,IAAAA,WAAW,GAAGJ,MAAd;AACD;;AAED,MAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAClC;AACA;AACAG,IAAAA,WAAW,GAAGH,QAAQ,CAACD,MAAD,CAAtB;AACD,GAJD,MAIO,IAAI,OAAOC,QAAP,KAAoB,QAApB,IAAgC,CAAC,GAAGN,cAAc,CAAC,SAAD,CAAlB,EAA+BK,MAA/B,CAApC,EAA4E;AACjFI,IAAAA,WAAW,GAAGJ,MAAM,CAACC,QAAD,CAApB;AACD;;AAED,IAAE,OAAOG,WAAP,KAAuB,QAAzB,IAAqCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,CAAC,GAAGf,UAAU,CAAC,SAAD,CAAd,EAA2B,KAA3B,EAAkC,uEAAuE,uEAAvE,GAAiJ,8CAAnL,CAAxC,GAA6QgB,SAAS,CAAC,KAAD,CAA3T,GAAqU,KAAK,CAA1U;AACA,SAAOJ,WAAP;AACD;;AAED,IAAIK,QAAQ,GAAGV,cAAf;AACAT,OAAO,CAAC,SAAD,CAAP,GAAqBmB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nvar _isPlainObject = _interopRequireDefault(require(\"lodash/isPlainObject\"));\n\nvar _getStringLabelKey = _interopRequireDefault(require(\"./getStringLabelKey\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Retrieves the display string from an option. Options can be the string\n * themselves, or an object with a defined display string. Anything else throws\n * an error.\n */\nfunction getOptionLabel(option, labelKey) {\n  if (option.paginationOption || option.customOption) {\n    return option[(0, _getStringLabelKey[\"default\"])(labelKey)];\n  }\n\n  var optionLabel;\n\n  if (typeof option === 'string') {\n    optionLabel = option;\n  }\n\n  if (typeof labelKey === 'function') {\n    // This overwrites string options, but we assume the consumer wants to do\n    // something custom if `labelKey` is a function.\n    optionLabel = labelKey(option);\n  } else if (typeof labelKey === 'string' && (0, _isPlainObject[\"default\"])(option)) {\n    optionLabel = option[labelKey];\n  }\n\n  !(typeof optionLabel === 'string') ? process.env.NODE_ENV !== \"production\" ? (0, _invariant[\"default\"])(false, 'One or more options does not have a valid label string. Check the ' + '`labelKey` prop to ensure that it matches the correct option key and ' + 'provides a string for filtering and display.') : invariant(false) : void 0;\n  return optionLabel;\n}\n\nvar _default = getOptionLabel;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}