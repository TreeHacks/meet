{"ast":null,"code":"'use strict';\n/*!\n * exports.\n */\n\nmodule.exports = brackets2dots;\n/*!\n * regexp patterns.\n */\n\nvar REPLACE_BRACKETS = /\\[([^\\[\\]]+)\\]/g;\nvar LFT_RT_TRIM_DOTS = /^[.]*|[.]*$/g;\n/**\n * Convert string with bracket notation to dot property notation.\n *\n * ### Examples:\n *\n *      brackets2dots('group[0].section.a.seat[3]')\n *      //=> 'group.0.section.a.seat.3'\n *\n *      brackets2dots('[0].section.a.seat[3]')\n *      //=> '0.section.a.seat.3'\n *\n *      brackets2dots('people[*].age')\n *      //=> 'people.*.age'\n *\n * @param  {String} string\n * original string\n *\n * @return {String}\n * dot/bracket-notation string\n */\n\nfunction brackets2dots(string) {\n  return {}.toString.call(string) == '[object String]' ? string.replace(REPLACE_BRACKETS, '.$1').replace(LFT_RT_TRIM_DOTS, '') : '';\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/brackets2dots/index.js"],"names":["module","exports","brackets2dots","REPLACE_BRACKETS","LFT_RT_TRIM_DOTS","string","toString","call","replace"],"mappings":"AAAA;AAEA;;;;AAIAA,MAAM,CAACC,OAAP,GAAiBC,aAAjB;AAEA;;;;AAIA,IAAIC,gBAAgB,GAAG,iBAAvB;AACA,IAAIC,gBAAgB,GAAG,cAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASF,aAAT,CAAuBG,MAAvB,EAA+B;AAC7B,SAAQ,EAAD,CAAKC,QAAL,CAAcC,IAAd,CAAmBF,MAAnB,KAA8B,iBAA9B,GACAA,MAAM,CAACG,OAAP,CAAeL,gBAAf,EAAiC,KAAjC,EAAwCK,OAAxC,CAAgDJ,gBAAhD,EAAkE,EAAlE,CADA,GAEA,EAFP;AAGD","sourcesContent":["'use strict';\n\n/*!\n * exports.\n */\n\nmodule.exports = brackets2dots;\n\n/*!\n * regexp patterns.\n */\n\nvar REPLACE_BRACKETS = /\\[([^\\[\\]]+)\\]/g;\nvar LFT_RT_TRIM_DOTS = /^[.]*|[.]*$/g;\n\n/**\n * Convert string with bracket notation to dot property notation.\n *\n * ### Examples:\n *\n *      brackets2dots('group[0].section.a.seat[3]')\n *      //=> 'group.0.section.a.seat.3'\n *\n *      brackets2dots('[0].section.a.seat[3]')\n *      //=> '0.section.a.seat.3'\n *\n *      brackets2dots('people[*].age')\n *      //=> 'people.*.age'\n *\n * @param  {String} string\n * original string\n *\n * @return {String}\n * dot/bracket-notation string\n */\n\nfunction brackets2dots(string) {\n  return ({}).toString.call(string) == '[object String]'\n       ? string.replace(REPLACE_BRACKETS, '.$1').replace(LFT_RT_TRIM_DOTS, '')\n       : ''\n}\n"]},"metadata":{},"sourceType":"script"}