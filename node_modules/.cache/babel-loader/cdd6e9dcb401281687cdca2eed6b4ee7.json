{"ast":null,"code":"'use strict';\n\nvar curry2 = require('curry2');\n\nvar debug = require('debug')('selectn');\n\nvar dotted = require('brackets2dots');\n\nvar splits = require('dotsplit.js');\n\nvar string = Object.prototype.toString;\nmodule.exports = curry2(selectn);\n/**\n * Curried property accessor function that resolves deeply-nested object properties via dot/bracket-notation\n * string path while mitigating `TypeErrors` via friendly and composable API.\n *\n * @param {String|Array} path\n * Dot/bracket-notation string path or array.\n *\n * @param {Object} object\n * Object to access.\n *\n * @return {Function|*|undefined}\n * (1) returns `selectn/1` when partially applied.\n * (2) returns value at path if path exists.\n * (3) returns undefined if path does not exist.\n */\n\nfunction selectn(path, object) {\n  debug('arguments:', {\n    path: path,\n    object: object\n  });\n  var idx = -1;\n  var seg = string.call(path) === '[object Array]' ? path : splits(dotted(path));\n  var end = seg.length;\n  var ref = end ? object : void 0;\n\n  while (++idx < end) {\n    if (Object(ref) !== ref) return void 0;\n    ref = ref[seg[idx]];\n  }\n\n  debug('ref:', ref);\n  return typeof ref === 'function' ? ref() : ref;\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/selectn/index.js"],"names":["curry2","require","debug","dotted","splits","string","Object","prototype","toString","module","exports","selectn","path","object","idx","seg","call","end","length","ref"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAP,CAAiB,SAAjB,CAAZ;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,aAAD,CAApB;;AACA,IAAII,MAAM,GAAGC,MAAM,CAACC,SAAP,CAAiBC,QAA9B;AAEAC,MAAM,CAACC,OAAP,GAAiBV,MAAM,CAACW,OAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;AAeA,SAASA,OAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAC9BX,EAAAA,KAAK,CAAC,YAAD,EAAe;AAClBU,IAAAA,IAAI,EAAEA,IADY;AAElBC,IAAAA,MAAM,EAAEA;AAFU,GAAf,CAAL;AAKA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,GAAG,GAAGV,MAAM,CAACW,IAAP,CAAYJ,IAAZ,MAAsB,gBAAtB,GAAyCA,IAAzC,GAAgDR,MAAM,CAACD,MAAM,CAACS,IAAD,CAAP,CAAhE;AACA,MAAIK,GAAG,GAAGF,GAAG,CAACG,MAAd;AACA,MAAIC,GAAG,GAAGF,GAAG,GAAGJ,MAAH,GAAY,KAAK,CAA9B;;AAEA,SAAO,EAAEC,GAAF,GAAQG,GAAf,EAAoB;AAClB,QAAIX,MAAM,CAACa,GAAD,CAAN,KAAgBA,GAApB,EAAyB,OAAO,KAAK,CAAZ;AACzBA,IAAAA,GAAG,GAAGA,GAAG,CAACJ,GAAG,CAACD,GAAD,CAAJ,CAAT;AACD;;AAEDZ,EAAAA,KAAK,CAAC,MAAD,EAASiB,GAAT,CAAL;AACA,SAAO,OAAOA,GAAP,KAAe,UAAf,GAA4BA,GAAG,EAA/B,GAAoCA,GAA3C;AACD","sourcesContent":["'use strict'\n\nvar curry2 = require('curry2')\nvar debug = require('debug')('selectn')\nvar dotted = require('brackets2dots')\nvar splits = require('dotsplit.js')\nvar string = Object.prototype.toString\n\nmodule.exports = curry2(selectn)\n\n/**\n * Curried property accessor function that resolves deeply-nested object properties via dot/bracket-notation\n * string path while mitigating `TypeErrors` via friendly and composable API.\n *\n * @param {String|Array} path\n * Dot/bracket-notation string path or array.\n *\n * @param {Object} object\n * Object to access.\n *\n * @return {Function|*|undefined}\n * (1) returns `selectn/1` when partially applied.\n * (2) returns value at path if path exists.\n * (3) returns undefined if path does not exist.\n */\nfunction selectn (path, object) {\n  debug('arguments:', {\n    path: path,\n    object: object\n  })\n\n  var idx = -1\n  var seg = string.call(path) === '[object Array]' ? path : splits(dotted(path))\n  var end = seg.length\n  var ref = end ? object : void 0\n\n  while (++idx < end) {\n    if (Object(ref) !== ref) return void 0\n    ref = ref[seg[idx]]\n  }\n\n  debug('ref:', ref)\n  return typeof ref === 'function' ? ref() : ref\n}\n"]},"metadata":{},"sourceType":"script"}