{"ast":null,"code":"'use strict';\n\nvar implementation = require('./implementation');\n\nvar supportsDescriptors = require('define-properties').supportsDescriptors;\n\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar TypeErr = TypeError;\n\nmodule.exports = function getPolyfill() {\n  if (!supportsDescriptors) {\n    throw new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');\n  }\n\n  if (/a/mig.flags === 'gim') {\n    var descriptor = gOPD(RegExp.prototype, 'flags');\n\n    if (descriptor && typeof descriptor.get === 'function' && typeof /a/.dotAll === 'boolean') {\n      return descriptor.get;\n    }\n  }\n\n  return implementation;\n};","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/regexp.prototype.flags/polyfill.js"],"names":["implementation","require","supportsDescriptors","gOPD","Object","getOwnPropertyDescriptor","TypeErr","TypeError","module","exports","getPolyfill","flags","descriptor","RegExp","prototype","get","dotAll"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,kBAAD,CAA5B;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BC,mBAAvD;;AACA,IAAIC,IAAI,GAAGC,MAAM,CAACC,wBAAlB;AACA,IAAIC,OAAO,GAAGC,SAAd;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,GAAuB;AACvC,MAAI,CAACR,mBAAL,EAA0B;AACzB,UAAM,IAAII,OAAJ,CAAY,2FAAZ,CAAN;AACA;;AACD,MAAI,OAAOK,KAAP,KAAiB,KAArB,EAA4B;AAC3B,QAAIC,UAAU,GAAGT,IAAI,CAACU,MAAM,CAACC,SAAR,EAAmB,OAAnB,CAArB;;AACA,QAAIF,UAAU,IAAI,OAAOA,UAAU,CAACG,GAAlB,KAA0B,UAAxC,IAAsD,OAAQ,GAAD,CAAMC,MAAb,KAAwB,SAAlF,EAA6F;AAC5F,aAAOJ,UAAU,CAACG,GAAlB;AACA;AACD;;AACD,SAAOf,cAAP;AACA,CAXD","sourcesContent":["'use strict';\n\nvar implementation = require('./implementation');\n\nvar supportsDescriptors = require('define-properties').supportsDescriptors;\nvar gOPD = Object.getOwnPropertyDescriptor;\nvar TypeErr = TypeError;\n\nmodule.exports = function getPolyfill() {\n\tif (!supportsDescriptors) {\n\t\tthrow new TypeErr('RegExp.prototype.flags requires a true ES5 environment that supports property descriptors');\n\t}\n\tif (/a/mig.flags === 'gim') {\n\t\tvar descriptor = gOPD(RegExp.prototype, 'flags');\n\t\tif (descriptor && typeof descriptor.get === 'function' && typeof (/a/).dotAll === 'boolean') {\n\t\t\treturn descriptor.get;\n\t\t}\n\t}\n\treturn implementation;\n};\n"]},"metadata":{},"sourceType":"script"}