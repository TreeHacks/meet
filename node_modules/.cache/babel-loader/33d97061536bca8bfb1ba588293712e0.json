{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getMatchBounds;\n\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\n\nvar _stripDiacritics = _interopRequireDefault(require(\"./stripDiacritics\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar CASE_INSENSITIVE = 'i';\nvar COMBINING_MARKS = /[\\u0300-\\u036F]/;\n\nfunction getMatchBounds(subject, str) {\n  var search = new RegExp((0, _escapeStringRegexp[\"default\"])((0, _stripDiacritics[\"default\"])(str)), CASE_INSENSITIVE);\n  var matches = search.exec((0, _stripDiacritics[\"default\"])(subject));\n\n  if (!matches) {\n    return null;\n  }\n\n  var start = matches.index;\n  var matchLength = matches[0].length; // Account for combining marks, which changes the indices.\n\n  if (COMBINING_MARKS.test(subject)) {\n    // Starting at the beginning of the subject string, check for the number of\n    // combining marks and increment the start index whenever one is found.\n    for (var ii = 0; ii <= start; ii++) {\n      if (COMBINING_MARKS.test(subject[ii])) {\n        start += 1;\n      }\n    } // Similarly, increment the length of the match string if it contains a\n    // combining mark.\n\n\n    for (var _ii = start; _ii <= start + matchLength; _ii++) {\n      if (COMBINING_MARKS.test(subject[_ii])) {\n        matchLength += 1;\n      }\n    }\n  }\n\n  return {\n    end: start + matchLength,\n    start: start\n  };\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-bootstrap-typeahead/lib/utils/getMatchBounds.js"],"names":["Object","defineProperty","exports","value","getMatchBounds","_escapeStringRegexp","_interopRequireDefault","require","_stripDiacritics","obj","__esModule","CASE_INSENSITIVE","COMBINING_MARKS","subject","str","search","RegExp","matches","exec","start","index","matchLength","length","test","ii","_ii","end"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,cAArB;;AAEA,IAAIC,mBAAmB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,sBAAD,CAAR,CAAhD;;AAEA,IAAIC,gBAAgB,GAAGF,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA7C;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,IAAIE,gBAAgB,GAAG,GAAvB;AACA,IAAIC,eAAe,GAAG,iBAAtB;;AAEA,SAASR,cAAT,CAAwBS,OAAxB,EAAiCC,GAAjC,EAAsC;AACpC,MAAIC,MAAM,GAAG,IAAIC,MAAJ,CAAW,CAAC,GAAGX,mBAAmB,CAAC,SAAD,CAAvB,EAAoC,CAAC,GAAGG,gBAAgB,CAAC,SAAD,CAApB,EAAiCM,GAAjC,CAApC,CAAX,EAAuFH,gBAAvF,CAAb;AACA,MAAIM,OAAO,GAAGF,MAAM,CAACG,IAAP,CAAY,CAAC,GAAGV,gBAAgB,CAAC,SAAD,CAApB,EAAiCK,OAAjC,CAAZ,CAAd;;AAEA,MAAI,CAACI,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,MAAIE,KAAK,GAAGF,OAAO,CAACG,KAApB;AACA,MAAIC,WAAW,GAAGJ,OAAO,CAAC,CAAD,CAAP,CAAWK,MAA7B,CAToC,CASC;;AAErC,MAAIV,eAAe,CAACW,IAAhB,CAAqBV,OAArB,CAAJ,EAAmC;AACjC;AACA;AACA,SAAK,IAAIW,EAAE,GAAG,CAAd,EAAiBA,EAAE,IAAIL,KAAvB,EAA8BK,EAAE,EAAhC,EAAoC;AAClC,UAAIZ,eAAe,CAACW,IAAhB,CAAqBV,OAAO,CAACW,EAAD,CAA5B,CAAJ,EAAuC;AACrCL,QAAAA,KAAK,IAAI,CAAT;AACD;AACF,KAPgC,CAO/B;AACF;;;AAGA,SAAK,IAAIM,GAAG,GAAGN,KAAf,EAAsBM,GAAG,IAAIN,KAAK,GAAGE,WAArC,EAAkDI,GAAG,EAArD,EAAyD;AACvD,UAAIb,eAAe,CAACW,IAAhB,CAAqBV,OAAO,CAACY,GAAD,CAA5B,CAAJ,EAAwC;AACtCJ,QAAAA,WAAW,IAAI,CAAf;AACD;AACF;AACF;;AAED,SAAO;AACLK,IAAAA,GAAG,EAAEP,KAAK,GAAGE,WADR;AAELF,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getMatchBounds;\n\nvar _escapeStringRegexp = _interopRequireDefault(require(\"escape-string-regexp\"));\n\nvar _stripDiacritics = _interopRequireDefault(require(\"./stripDiacritics\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar CASE_INSENSITIVE = 'i';\nvar COMBINING_MARKS = /[\\u0300-\\u036F]/;\n\nfunction getMatchBounds(subject, str) {\n  var search = new RegExp((0, _escapeStringRegexp[\"default\"])((0, _stripDiacritics[\"default\"])(str)), CASE_INSENSITIVE);\n  var matches = search.exec((0, _stripDiacritics[\"default\"])(subject));\n\n  if (!matches) {\n    return null;\n  }\n\n  var start = matches.index;\n  var matchLength = matches[0].length; // Account for combining marks, which changes the indices.\n\n  if (COMBINING_MARKS.test(subject)) {\n    // Starting at the beginning of the subject string, check for the number of\n    // combining marks and increment the start index whenever one is found.\n    for (var ii = 0; ii <= start; ii++) {\n      if (COMBINING_MARKS.test(subject[ii])) {\n        start += 1;\n      }\n    } // Similarly, increment the length of the match string if it contains a\n    // combining mark.\n\n\n    for (var _ii = start; _ii <= start + matchLength; _ii++) {\n      if (COMBINING_MARKS.test(subject[_ii])) {\n        matchLength += 1;\n      }\n    }\n  }\n\n  return {\n    end: start + matchLength,\n    start: start\n  };\n}"]},"metadata":{},"sourceType":"script"}