{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultFilterBy;\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _isString = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _some = _interopRequireDefault(require(\"lodash/some\"));\n\nvar _stripDiacritics = _interopRequireDefault(require(\"./stripDiacritics\"));\n\nvar _warn = _interopRequireDefault(require(\"./warn\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction isMatch(input, string, props) {\n  var searchStr = input;\n  var str = string;\n\n  if (!props.caseSensitive) {\n    searchStr = searchStr.toLowerCase();\n    str = str.toLowerCase();\n  }\n\n  if (props.ignoreDiacritics) {\n    searchStr = (0, _stripDiacritics[\"default\"])(searchStr);\n    str = (0, _stripDiacritics[\"default\"])(str);\n  }\n\n  return str.indexOf(searchStr) !== -1;\n}\n/**\n * Default algorithm for filtering results.\n */\n\n\nfunction defaultFilterBy(option, props) {\n  var filterBy = props.filterBy,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't show selected options in the menu for the multi-select case.\n\n  if (multiple && selected.some(function (o) {\n    return (0, _isEqual[\"default\"])(o, option);\n  })) {\n    return false;\n  }\n\n  var fields = filterBy.slice();\n\n  if ((0, _isFunction[\"default\"])(labelKey) && isMatch(text, labelKey(option), props)) {\n    return true;\n  }\n\n  if ((0, _isString[\"default\"])(labelKey)) {\n    // Add the `labelKey` field to the list of fields if it isn't already there.\n    if (fields.indexOf(labelKey) === -1) {\n      fields.unshift(labelKey);\n    }\n  }\n\n  if ((0, _isString[\"default\"])(option)) {\n    (0, _warn[\"default\"])(fields.length <= 1, 'You cannot filter by properties when `option` is a string.');\n    return isMatch(text, option, props);\n  }\n\n  return (0, _some[\"default\"])(fields, function (field) {\n    var value = option[field];\n\n    if (!(0, _isString[\"default\"])(value)) {\n      (0, _warn[\"default\"])(false, 'Fields passed to `filterBy` should have string values. Value will ' + 'be converted to a string; results may be unexpected.'); // Coerce to string since `toString` isn't null-safe.\n\n      value = \"\".concat(value);\n    }\n\n    return isMatch(text, value, props);\n  });\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-bootstrap-typeahead/lib/utils/defaultFilterBy.js"],"names":["Object","defineProperty","exports","value","defaultFilterBy","_isEqual","_interopRequireDefault","require","_isFunction","_isString","_some","_stripDiacritics","_warn","obj","__esModule","isMatch","input","string","props","searchStr","str","caseSensitive","toLowerCase","ignoreDiacritics","indexOf","option","filterBy","labelKey","multiple","selected","text","some","o","fields","slice","unshift","length","field","concat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = defaultFilterBy;\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _isFunction = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _isString = _interopRequireDefault(require(\"lodash/isString\"));\n\nvar _some = _interopRequireDefault(require(\"lodash/some\"));\n\nvar _stripDiacritics = _interopRequireDefault(require(\"./stripDiacritics\"));\n\nvar _warn = _interopRequireDefault(require(\"./warn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction isMatch(input, string, props) {\n  var searchStr = input;\n  var str = string;\n\n  if (!props.caseSensitive) {\n    searchStr = searchStr.toLowerCase();\n    str = str.toLowerCase();\n  }\n\n  if (props.ignoreDiacritics) {\n    searchStr = (0, _stripDiacritics[\"default\"])(searchStr);\n    str = (0, _stripDiacritics[\"default\"])(str);\n  }\n\n  return str.indexOf(searchStr) !== -1;\n}\n/**\n * Default algorithm for filtering results.\n */\n\n\nfunction defaultFilterBy(option, props) {\n  var filterBy = props.filterBy,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't show selected options in the menu for the multi-select case.\n\n  if (multiple && selected.some(function (o) {\n    return (0, _isEqual[\"default\"])(o, option);\n  })) {\n    return false;\n  }\n\n  var fields = filterBy.slice();\n\n  if ((0, _isFunction[\"default\"])(labelKey) && isMatch(text, labelKey(option), props)) {\n    return true;\n  }\n\n  if ((0, _isString[\"default\"])(labelKey)) {\n    // Add the `labelKey` field to the list of fields if it isn't already there.\n    if (fields.indexOf(labelKey) === -1) {\n      fields.unshift(labelKey);\n    }\n  }\n\n  if ((0, _isString[\"default\"])(option)) {\n    (0, _warn[\"default\"])(fields.length <= 1, 'You cannot filter by properties when `option` is a string.');\n    return isMatch(text, option, props);\n  }\n\n  return (0, _some[\"default\"])(fields, function (field) {\n    var value = option[field];\n\n    if (!(0, _isString[\"default\"])(value)) {\n      (0, _warn[\"default\"])(false, 'Fields passed to `filterBy` should have string values. Value will ' + 'be converted to a string; results may be unexpected.'); // Coerce to string since `toString` isn't null-safe.\n\n      value = \"\".concat(value);\n    }\n\n    return isMatch(text, value, props);\n  });\n}"]},"metadata":{},"sourceType":"script"}