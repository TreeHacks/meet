{"ast":null,"code":"import _objectSpread from \"/Users/lucaspauker/projects/treehacks/meet/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/lucaspauker/projects/treehacks/meet/src/js/form.tsx\";\nimport React from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport Linkify from \"react-linkify\";\nimport { set, pull } from \"lodash\";\nimport { TypeaheadField } from \"react-jsonschema-form-extras/lib/TypeaheadField\";\n\nconst SectionHeaderWidget = props => {\n  const schema = props.schema;\n  return React.createElement(React.Fragment, null, React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, schema.title), schema.custom_description && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, schema.custom_description));\n};\n\nconst FilePreviewWidget = props => {\n  if (!props.value) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"No file uploaded.\");\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"iframe\", {\n    src: props.value,\n    style: Object.assign({\n      width: \"100%\",\n      minHeight: 400\n    }, props.style),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }));\n};\n\nconst TextareaReadOnlyWidget = props => {\n  return React.createElement(Linkify, {\n    componentDecorator: LinkDecorator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.value));\n};\n\nconst LinkDecorator = (href, text, key) => {\n  return React.createElement(\"a\", {\n    href: href,\n    key: key,\n    target: \"_blank\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, text);\n};\n\nconst TextareaWordCountingWidget = props => {\n  const id = props.id,\n        options = props.options,\n        placeholder = props.placeholder,\n        value = props.value,\n        required = props.required,\n        disabled = props.disabled,\n        readonly = props.readonly,\n        autofocus = props.autofocus,\n        onChange = props.onChange,\n        onBlur = props.onBlur,\n        onFocus = props.onFocus,\n        schema = props.schema;\n  const showWordCount = !!schema.word_count;\n  const wordCount = value ? value.split(/\\s+/g).length : 0;\n\n  const _onChange = ({\n    target: {\n      value\n    }\n  }) => {\n    return onChange(value === \"\" ? options.emptyValue : value);\n  };\n\n  const textarea = React.createElement(\"textarea\", {\n    id: id,\n    className: \"form-control\",\n    value: typeof value === \"undefined\" ? \"\" : value,\n    placeholder: placeholder,\n    required: required,\n    disabled: disabled,\n    readOnly: readonly,\n    autoFocus: autofocus,\n    rows: options.rows,\n    onBlur: onBlur && (event => onBlur(id, event.target.value)),\n    onFocus: onFocus && (event => onFocus(id, event.target.value)),\n    onChange: _onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  });\n\n  if (!showWordCount) {\n    return textarea;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, textarea, React.createElement(\"div\", {\n    className: \"form-control-word-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, wordCount, \" / \", schema.word_count, \" words\"));\n};\n\nfunction base64MimeType(encoded) {\n  var result = null;\n\n  if (typeof encoded !== 'string') {\n    return result;\n  }\n\n  var mime = encoded.match(/data:([a-zA-Z0-9]+\\/[a-zA-Z0-9-.+]+).*,.*/);\n\n  if (mime && mime.length) {\n    result = mime[1];\n  }\n\n  return result;\n}\n\nfunction validate(formData, errors, schema) {\n  // Word count limits\n  Object.keys(schema.properties).filter(key => !!schema.properties[key].word_count).forEach(key => {\n    const wordCount = schema.properties[key].word_count;\n\n    if (formData[key] && formData[key].split(/\\s+/g).length > wordCount) {\n      errors[key].addError(`Response cannot exceed ${wordCount} words`);\n    }\n  });\n  return errors;\n}\n\nexport default (props => {\n  let widgets;\n\n  if (props.submitted) {\n    widgets = {\n      sectionHeader: SectionHeaderWidget,\n      FileWidget: FilePreviewWidget,\n      textarea: TextareaReadOnlyWidget\n    };\n  } else {\n    widgets = {\n      sectionHeader: SectionHeaderWidget,\n      textarea: TextareaWordCountingWidget,\n      linkarea: TextareaWordCountingWidget\n    };\n  }\n\n  let uiSchema = props.uiSchema;\n  let schema = props.schema;\n\n  if (props.shownFields) {\n    // Hide other fields and make them not required.\n    for (let field in schema.properties) {\n      if (props.shownFields.indexOf(field) === -1) {\n        set(uiSchema, `${field}.classNames`, \"treehacks-hidden\");\n\n        if (schema.required) {\n          pull(schema.required, field);\n        }\n      }\n    }\n  }\n\n  return React.createElement(Form, {\n    className: `treehacks-form ${props.submitted ? \"treehacks-form-disabled\" : \"\"}`,\n    schema: schema,\n    uiSchema: _objectSpread({}, uiSchema, {\n      \"ui:readonly\": props.submitted\n    }),\n    formData: props.formData //liveValidate={true}\n    ,\n    showErrorList: true,\n    validate: (a, b) => validate(a, b, schema),\n    fields: {\n      typeahead: TypeaheadField\n    },\n    widgets: widgets,\n    onChange: e => props.onChange(e),\n    onError: e => props.onError(e),\n    onSubmit: e => props.onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, !props.submitted ? props.children || React.createElement(\"div\", {\n    className: \"btn-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"btn btn-custom inverted\",\n    type: \"submit\",\n    value: \"Save for later\",\n    onClick: e => {\n      e.preventDefault();\n      props.onSubmit(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    className: \"btn btn-custom\",\n    type: \"submit\",\n    value: \"Submit\" //onClick={e => this.onSubmit(true)}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }));\n});","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/src/js/form.tsx"],"names":["React","Form","Linkify","set","pull","TypeaheadField","SectionHeaderWidget","props","schema","title","custom_description","FilePreviewWidget","value","Object","assign","width","minHeight","style","TextareaReadOnlyWidget","LinkDecorator","href","text","key","TextareaWordCountingWidget","id","options","placeholder","required","disabled","readonly","autofocus","onChange","onBlur","onFocus","showWordCount","word_count","wordCount","split","length","_onChange","target","emptyValue","textarea","rows","event","base64MimeType","encoded","result","mime","match","validate","formData","errors","keys","properties","filter","forEach","addError","widgets","submitted","sectionHeader","FileWidget","linkarea","uiSchema","shownFields","field","indexOf","a","b","typeahead","e","onError","onSubmit","children","preventDefault"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"react-jsonschema-form\";\nimport Linkify from \"react-linkify\";\nimport FileWidget from \"react-jsonschema-form\";\nimport { connect } from \"react-redux\";\nimport { setPage, setData, saveData, loadData, getUserProfile, submitForm, setFormName } from \"../store/form/actions\";\n\nimport { IFormPageProps } from \"./types\";\nimport { cloneDeep, get, set, pull } from \"lodash\";\nimport Loading from \"../Loading/Loading\";\nimport { push } from 'connected-react-router';\nimport { TypeaheadField } from \"react-jsonschema-form-extras/lib/TypeaheadField\";\n\nconst SectionHeaderWidget = (props) => {\n    const { schema } = props;\n    return (<>\n        <legend>\n            {schema.title}\n        </legend>\n        {schema.custom_description && <p>{schema.custom_description}</p>}\n    </>\n    );\n};\n\nconst FilePreviewWidget = (props) => {\n    if (!props.value) {\n        return <div>No file uploaded.</div>;\n    }\n    return <div>\n        <iframe src={props.value} style={Object.assign({ width: \"100%\", minHeight: 400 }, props.style)}></iframe>\n    </div>;\n};\n\nconst TextareaReadOnlyWidget = (props) => {\n    return <Linkify componentDecorator={LinkDecorator}><div className=\"form-control\">{props.value}</div></Linkify>;\n}\n\n\nconst LinkDecorator = (href, text, key) => {\n    return <a href={href} key={key} target=\"_blank\">\n        {text}\n    </a>;\n}\n\nconst TextareaWordCountingWidget = (props) => {\n  const {\n    id,\n    options,\n    placeholder,\n    value,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n    schema,\n  } = props;\n\n  const showWordCount = !!schema.word_count;\n  const wordCount = value ? value.split(/\\s+/g).length : 0;\n\n  const _onChange = ({ target: { value } }) => {\n    return onChange(value === \"\" ? options.emptyValue : value);\n  };\n\n  const textarea = (\n      <textarea\n        id={id}\n        className=\"form-control\"\n        value={typeof value === \"undefined\" ? \"\" : value}\n        placeholder={placeholder}\n        required={required}\n        disabled={disabled}\n        readOnly={readonly}\n        autoFocus={autofocus}\n        rows={options.rows}\n        onBlur={onBlur && (event => onBlur(id, event.target.value))}\n        onFocus={onFocus && (event => onFocus(id, event.target.value))}\n        onChange={_onChange}\n      />\n  );\n\n  if (!showWordCount) {\n      return textarea;\n  }\n\n  return (\n    <div>\n        {textarea}\n        <div className=\"form-control-word-count\">{wordCount} / {schema.word_count} words</div>\n    </div>\n  );\n}\n\n\nfunction base64MimeType(encoded) {\n    var result = null;\n\n    if (typeof encoded !== 'string') {\n        return result;\n    }\n\n    var mime = encoded.match(/data:([a-zA-Z0-9]+\\/[a-zA-Z0-9-.+]+).*,.*/);\n\n    if (mime && mime.length) {\n        result = mime[1];\n    }\n\n    return result;\n}\nfunction validate(formData, errors, schema) {\n    // Word count limits\n    Object.keys(schema.properties).filter(key => !!schema.properties[key].word_count).forEach(key => {\n        const wordCount = schema.properties[key].word_count;\n        if (formData[key] && formData[key].split(/\\s+/g).length > wordCount) {\n            errors[key].addError(`Response cannot exceed ${wordCount} words`);\n        }\n    });\n    return errors;\n}\n\nexport default (props: IFormPageProps) => {\n    let widgets;\n    if (props.submitted) {\n        widgets = { sectionHeader: SectionHeaderWidget, FileWidget: FilePreviewWidget, textarea: TextareaReadOnlyWidget,};\n    }\n    else {\n        widgets = { sectionHeader: SectionHeaderWidget, textarea: TextareaWordCountingWidget, linkarea: TextareaWordCountingWidget };\n    }\n    let uiSchema = (props.uiSchema);\n    let schema = (props.schema);\n    if (props.shownFields) {\n        // Hide other fields and make them not required.\n        for (let field in schema.properties) {\n            if (props.shownFields.indexOf(field) === -1) {\n                set(uiSchema, `${field}.classNames`, \"treehacks-hidden\");\n                if (schema.required) {\n                    pull(schema.required, field);\n                }\n            }\n        }\n    }\n\n    return (<Form\n        className={`treehacks-form ${props.submitted ? \"treehacks-form-disabled\" : \"\"}`}\n        schema={schema}\n        uiSchema={{\n            ...uiSchema,\n            \"ui:readonly\": props.submitted,\n        }} formData={props.formData}\n        //liveValidate={true}\n        showErrorList={true}\n        validate={(a, b) => validate(a, b, schema)}\n        fields={{ typeahead: TypeaheadField }}\n        widgets={widgets}\n        onChange={e => props.onChange(e)}\n        onError={(e) => props.onError(e)}\n        onSubmit={e => props.onSubmit(e)}>\n        {!props.submitted ?\n            (props.children || <div className=\"btn-container\">\n                <div>\n                    <input\n                        className=\"btn btn-custom inverted\"\n                        type=\"submit\"\n                        value=\"Save for later\"\n                        onClick={e => { e.preventDefault(); props.onSubmit(false); }}\n                    />\n                    <input\n                        className=\"btn btn-custom\"\n                        type=\"submit\"\n                        value=\"Submit\"\n                    //onClick={e => this.onSubmit(true)}\n                    />\n                </div>\n            </div>)\n            : <div></div>}\n    </Form>);\n}\n"]},"metadata":{},"sourceType":"module"}