{"ast":null,"code":"'use strict';\n\nvar alphabet = require('./alphabet');\n\nvar build = require('./build');\n\nvar isValid = require('./is-valid'); // if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\n\n\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\n\nfunction seed(seedValue) {\n  alphabet.seed(seedValue);\n  return module.exports;\n}\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\n\n\nfunction worker(workerId) {\n  clusterWorkerId = workerId;\n  return module.exports;\n}\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\n\n\nfunction characters(newCharacters) {\n  if (newCharacters !== undefined) {\n    alphabet.characters(newCharacters);\n  }\n\n  return alphabet.shuffled();\n}\n/**\n * Generate unique id\n * Returns string id\n */\n\n\nfunction generate() {\n  return build(clusterWorkerId);\n} // Export all other functions as properties of the generate function\n\n\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/shortid/lib/index.js"],"names":["alphabet","require","build","isValid","clusterWorkerId","seed","seedValue","module","exports","worker","workerId","characters","newCharacters","undefined","shuffled","generate"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAD,CAArB,C,CAEA;AACA;AACA;AACA;;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,0BAAD,CAAP,IAAuC,CAA7D;AAEA;;;;;;;AAMA,SAASI,IAAT,CAAcC,SAAd,EAAyB;AACrBN,EAAAA,QAAQ,CAACK,IAAT,CAAcC,SAAd;AACA,SAAOC,MAAM,CAACC,OAAd;AACH;AAED;;;;;;;;AAMA,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACtBN,EAAAA,eAAe,GAAGM,QAAlB;AACA,SAAOH,MAAM,CAACC,OAAd;AACH;AAED;;;;;;;AAKA,SAASG,UAAT,CAAoBC,aAApB,EAAmC;AAC/B,MAAIA,aAAa,KAAKC,SAAtB,EAAiC;AAC7Bb,IAAAA,QAAQ,CAACW,UAAT,CAAoBC,aAApB;AACH;;AAED,SAAOZ,QAAQ,CAACc,QAAT,EAAP;AACH;AAED;;;;;;AAIA,SAASC,QAAT,GAAoB;AAClB,SAAOb,KAAK,CAACE,eAAD,CAAZ;AACD,C,CAED;;;AACAG,MAAM,CAACC,OAAP,GAAiBO,QAAjB;AACAR,MAAM,CAACC,OAAP,CAAeO,QAAf,GAA0BA,QAA1B;AACAR,MAAM,CAACC,OAAP,CAAeH,IAAf,GAAsBA,IAAtB;AACAE,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBA,MAAxB;AACAF,MAAM,CAACC,OAAP,CAAeG,UAAf,GAA4BA,UAA5B;AACAJ,MAAM,CAACC,OAAP,CAAeL,OAAf,GAAyBA,OAAzB","sourcesContent":["'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n"]},"metadata":{},"sourceType":"script"}