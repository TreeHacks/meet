{"ast":null,"code":"'use strict';\n\nvar toString = Object.prototype.toString;\n/**\n * Transform dot-delimited strings to array of strings.\n *\n * @param  {String} string\n * Dot-delimited string.\n *\n * @return {Array}\n * Array of strings.\n */\n\nfunction dotsplit(string) {\n  var idx = -1;\n  var str = compact(normalize(string).split('.'));\n  var end = str.length;\n  var out = [];\n\n  while (++idx < end) {\n    out.push(todots(str[idx]));\n  }\n\n  return out;\n}\n/**\n * Replace escapes with a placeholder.\n *\n * @param  {String} string\n * Dot-delimited string.\n *\n * @return {String}\n * Dot-delimited string with placeholders in place of escapes.\n */\n\n\nfunction normalize(string) {\n  return (toString.call(string) === '[object String]' ? string : '').replace(/\\\\\\./g, '\\uffff');\n}\n/**\n * Drop empty values from array.\n *\n * @param  {Array} array\n * Array of strings.\n *\n * @return {Array}\n * Array of strings (empty values dropped).\n */\n\n\nfunction compact(arr) {\n  var idx = -1;\n  var end = arr.length;\n  var out = [];\n\n  while (++idx < end) {\n    if (arr[idx]) out.push(arr[idx]);\n  }\n\n  return out;\n}\n/**\n * Change placeholder to dots.\n *\n * @param  {String} string\n * Dot-delimited string with placeholders.\n *\n * @return {String}\n * Dot-delimited string without placeholders.\n */\n\n\nfunction todots(string) {\n  return string.replace(/\\uffff/g, '.');\n}\n/*!\n * exports.\n */\n\n\nmodule.exports = dotsplit;","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/dotsplit.js/index.js"],"names":["toString","Object","prototype","dotsplit","string","idx","str","compact","normalize","split","end","length","out","push","todots","call","replace","arr","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,SAAP,CAAiBF,QAAhC;AAEA;;;;;;;;;;AAUA,SAASG,QAAT,CAAmBC,MAAnB,EAA2B;AACzB,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIC,GAAG,GAAGC,OAAO,CAACC,SAAS,CAACJ,MAAD,CAAT,CAAkBK,KAAlB,CAAwB,GAAxB,CAAD,CAAjB;AACA,MAAIC,GAAG,GAAGJ,GAAG,CAACK,MAAd;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,SAAO,EAAEP,GAAF,GAAQK,GAAf,EAAoB;AAClBE,IAAAA,GAAG,CAACC,IAAJ,CAASC,MAAM,CAACR,GAAG,CAACD,GAAD,CAAJ,CAAf;AACD;;AAED,SAAOO,GAAP;AACD;AAED;;;;;;;;;;;AAUA,SAASJ,SAAT,CAAoBJ,MAApB,EAA4B;AAC1B,SAAO,CAACJ,QAAQ,CAACe,IAAT,CAAcX,MAAd,MAA0B,iBAA1B,GAA8CA,MAA9C,GAAuD,EAAxD,EAA4DY,OAA5D,CAAoE,OAApE,EAA6E,QAA7E,CAAP;AACD;AAED;;;;;;;;;;;AAUA,SAAST,OAAT,CAAkBU,GAAlB,EAAuB;AACrB,MAAIZ,GAAG,GAAG,CAAC,CAAX;AACA,MAAIK,GAAG,GAAGO,GAAG,CAACN,MAAd;AACA,MAAIC,GAAG,GAAG,EAAV;;AAEA,SAAO,EAAEP,GAAF,GAAQK,GAAf,EAAoB;AAClB,QAAIO,GAAG,CAACZ,GAAD,CAAP,EAAcO,GAAG,CAACC,IAAJ,CAASI,GAAG,CAACZ,GAAD,CAAZ;AACf;;AAED,SAAOO,GAAP;AACD;AAED;;;;;;;;;;;AAUA,SAASE,MAAT,CAAiBV,MAAjB,EAAyB;AACvB,SAAOA,MAAM,CAACY,OAAP,CAAe,SAAf,EAA0B,GAA1B,CAAP;AACD;AAED;;;;;AAIAE,MAAM,CAACC,OAAP,GAAiBhB,QAAjB","sourcesContent":["'use strict'\n\nvar toString = Object.prototype.toString\n\n/**\n * Transform dot-delimited strings to array of strings.\n *\n * @param  {String} string\n * Dot-delimited string.\n *\n * @return {Array}\n * Array of strings.\n */\n\nfunction dotsplit (string) {\n  var idx = -1\n  var str = compact(normalize(string).split('.'))\n  var end = str.length\n  var out = []\n\n  while (++idx < end) {\n    out.push(todots(str[idx]))\n  }\n\n  return out\n}\n\n/**\n * Replace escapes with a placeholder.\n *\n * @param  {String} string\n * Dot-delimited string.\n *\n * @return {String}\n * Dot-delimited string with placeholders in place of escapes.\n */\n\nfunction normalize (string) {\n  return (toString.call(string) === '[object String]' ? string : '').replace(/\\\\\\./g, '\\uffff')\n}\n\n/**\n * Drop empty values from array.\n *\n * @param  {Array} array\n * Array of strings.\n *\n * @return {Array}\n * Array of strings (empty values dropped).\n */\n\nfunction compact (arr) {\n  var idx = -1\n  var end = arr.length\n  var out = []\n\n  while (++idx < end) {\n    if (arr[idx]) out.push(arr[idx])\n  }\n\n  return out\n}\n\n/**\n * Change placeholder to dots.\n *\n * @param  {String} string\n * Dot-delimited string with placeholders.\n *\n * @return {String}\n * Dot-delimited string without placeholders.\n */\n\nfunction todots (string) {\n  return string.replace(/\\uffff/g, '.')\n}\n\n/*!\n * exports.\n */\n\nmodule.exports = dotsplit\n"]},"metadata":{},"sourceType":"script"}