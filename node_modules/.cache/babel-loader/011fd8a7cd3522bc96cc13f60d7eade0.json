{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toArray = toArray;\nexports.isObjectSchema = isObjectSchema;\nexports.isArraySchema = isArraySchema;\nexports.isStringSchema = isStringSchema;\nexports.isNumberSchema = isNumberSchema;\nexports.getDefaultValueForSchema = getDefaultValueForSchema;\nexports.deepCopy = deepCopy;\n\nfunction toArray(el) {\n  if (Array.isArray(el)) {\n    return el;\n  } else {\n    return [el];\n  }\n}\n\nfunction isObjectSchema(schema) {\n  return schema.type === \"object\" || schema.items && schema.items.type === \"object\";\n}\n\nfunction isArraySchema(schema) {\n  return schema.type === \"array\";\n}\n\nfunction isStringSchema(schema) {\n  return schema.type === \"string\";\n}\n\nfunction isNumberSchema(schema) {\n  return schema.type === \"number\" || schema.type === \"integer\";\n}\n\nfunction getDefaultValueForSchema(schema) {\n  if (isArraySchema(schema)) {\n    return [];\n  }\n\n  if (isObjectSchema(schema)) {\n    return {};\n  }\n\n  if (isStringSchema(schema)) {\n    return \"\";\n  }\n\n  if (isNumberSchema(schema)) {\n    return NaN;\n  }\n\n  return \"\";\n}\n\nfunction deepCopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-jsonschema-form-extras/lib/utils.js"],"names":["Object","defineProperty","exports","value","toArray","isObjectSchema","isArraySchema","isStringSchema","isNumberSchema","getDefaultValueForSchema","deepCopy","el","Array","isArray","schema","type","items","NaN","obj","JSON","parse","stringify"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,cAAR,GAAyBA,cAAzB;AACAH,OAAO,CAACI,aAAR,GAAwBA,aAAxB;AACAJ,OAAO,CAACK,cAAR,GAAyBA,cAAzB;AACAL,OAAO,CAACM,cAAR,GAAyBA,cAAzB;AACAN,OAAO,CAACO,wBAAR,GAAmCA,wBAAnC;AACAP,OAAO,CAACQ,QAAR,GAAmBA,QAAnB;;AACA,SAASN,OAAT,CAAiBO,EAAjB,EAAqB;AACnB,MAAIC,KAAK,CAACC,OAAN,CAAcF,EAAd,CAAJ,EAAuB;AACrB,WAAOA,EAAP;AACD,GAFD,MAEO;AACL,WAAO,CAACA,EAAD,CAAP;AACD;AACF;;AAED,SAASN,cAAT,CAAwBS,MAAxB,EAAgC;AAC9B,SAAOA,MAAM,CAACC,IAAP,KAAgB,QAAhB,IAA4BD,MAAM,CAACE,KAAP,IAAgBF,MAAM,CAACE,KAAP,CAAaD,IAAb,KAAsB,QAAzE;AACD;;AAED,SAAST,aAAT,CAAuBQ,MAAvB,EAA+B;AAC7B,SAAOA,MAAM,CAACC,IAAP,KAAgB,OAAvB;AACD;;AAED,SAASR,cAAT,CAAwBO,MAAxB,EAAgC;AAC9B,SAAOA,MAAM,CAACC,IAAP,KAAgB,QAAvB;AACD;;AAED,SAASP,cAAT,CAAwBM,MAAxB,EAAgC;AAC9B,SAAOA,MAAM,CAACC,IAAP,KAAgB,QAAhB,IAA4BD,MAAM,CAACC,IAAP,KAAgB,SAAnD;AACD;;AAED,SAASN,wBAAT,CAAkCK,MAAlC,EAA0C;AACxC,MAAIR,aAAa,CAACQ,MAAD,CAAjB,EAA2B;AACzB,WAAO,EAAP;AACD;;AAED,MAAIT,cAAc,CAACS,MAAD,CAAlB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AAED,MAAIP,cAAc,CAACO,MAAD,CAAlB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AAED,MAAIN,cAAc,CAACM,MAAD,CAAlB,EAA4B;AAC1B,WAAOG,GAAP;AACD;;AACD,SAAO,EAAP;AACD;;AAED,SAASP,QAAT,CAAkBQ,GAAlB,EAAuB;AACrB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,GAAf,CAAX,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toArray = toArray;\nexports.isObjectSchema = isObjectSchema;\nexports.isArraySchema = isArraySchema;\nexports.isStringSchema = isStringSchema;\nexports.isNumberSchema = isNumberSchema;\nexports.getDefaultValueForSchema = getDefaultValueForSchema;\nexports.deepCopy = deepCopy;\nfunction toArray(el) {\n  if (Array.isArray(el)) {\n    return el;\n  } else {\n    return [el];\n  }\n}\n\nfunction isObjectSchema(schema) {\n  return schema.type === \"object\" || schema.items && schema.items.type === \"object\";\n}\n\nfunction isArraySchema(schema) {\n  return schema.type === \"array\";\n}\n\nfunction isStringSchema(schema) {\n  return schema.type === \"string\";\n}\n\nfunction isNumberSchema(schema) {\n  return schema.type === \"number\" || schema.type === \"integer\";\n}\n\nfunction getDefaultValueForSchema(schema) {\n  if (isArraySchema(schema)) {\n    return [];\n  }\n\n  if (isObjectSchema(schema)) {\n    return {};\n  }\n\n  if (isStringSchema(schema)) {\n    return \"\";\n  }\n\n  if (isNumberSchema(schema)) {\n    return NaN;\n  }\n  return \"\";\n}\n\nfunction deepCopy(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}"]},"metadata":{},"sourceType":"script"}