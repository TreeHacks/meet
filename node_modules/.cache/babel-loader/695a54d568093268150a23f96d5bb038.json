{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = shouldSelectHint;\n\nvar _isSelectable = _interopRequireDefault(require(\"./isSelectable\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction shouldSelectHint(e, props) {\n  var hintText = props.hintText,\n      selectHintOnEnter = props.selectHintOnEnter,\n      value = props.value;\n\n  if (!hintText) {\n    return false;\n  }\n\n  if (e.keyCode === _constants.RIGHT) {\n    // For selectable input types (\"text\", \"search\"), only select the hint if\n    // it's at the end of the input value. For non-selectable types (\"email\",\n    // \"number\"), always select the hint.\n    return (0, _isSelectable[\"default\"])(e.target) ? e.target.selectionStart === value.length : true;\n  }\n\n  if (e.keyCode === _constants.TAB) {\n    return true;\n  }\n\n  if (e.keyCode === _constants.RETURN && selectHintOnEnter) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-bootstrap-typeahead/lib/utils/shouldSelectHint.js"],"names":["Object","defineProperty","exports","value","shouldSelectHint","_isSelectable","_interopRequireDefault","require","_constants","obj","__esModule","e","props","hintText","selectHintOnEnter","keyCode","RIGHT","target","selectionStart","length","TAB","RETURN"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,gBAArB;;AAEA,IAAIC,aAAa,GAAGC,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAA1C;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAAxB;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,SAASL,gBAAT,CAA0BO,CAA1B,EAA6BC,KAA7B,EAAoC;AAClC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,iBAAiB,GAAGF,KAAK,CAACE,iBAD9B;AAAA,MAEIX,KAAK,GAAGS,KAAK,CAACT,KAFlB;;AAIA,MAAI,CAACU,QAAL,EAAe;AACb,WAAO,KAAP;AACD;;AAED,MAAIF,CAAC,CAACI,OAAF,KAAcP,UAAU,CAACQ,KAA7B,EAAoC;AAClC;AACA;AACA;AACA,WAAO,CAAC,GAAGX,aAAa,CAAC,SAAD,CAAjB,EAA8BM,CAAC,CAACM,MAAhC,IAA0CN,CAAC,CAACM,MAAF,CAASC,cAAT,KAA4Bf,KAAK,CAACgB,MAA5E,GAAqF,IAA5F;AACD;;AAED,MAAIR,CAAC,CAACI,OAAF,KAAcP,UAAU,CAACY,GAA7B,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,MAAIT,CAAC,CAACI,OAAF,KAAcP,UAAU,CAACa,MAAzB,IAAmCP,iBAAvC,EAA0D;AACxD,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = shouldSelectHint;\n\nvar _isSelectable = _interopRequireDefault(require(\"./isSelectable\"));\n\nvar _constants = require(\"../constants\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction shouldSelectHint(e, props) {\n  var hintText = props.hintText,\n      selectHintOnEnter = props.selectHintOnEnter,\n      value = props.value;\n\n  if (!hintText) {\n    return false;\n  }\n\n  if (e.keyCode === _constants.RIGHT) {\n    // For selectable input types (\"text\", \"search\"), only select the hint if\n    // it's at the end of the input value. For non-selectable types (\"email\",\n    // \"number\"), always select the hint.\n    return (0, _isSelectable[\"default\"])(e.target) ? e.target.selectionStart === value.length : true;\n  }\n\n  if (e.keyCode === _constants.TAB) {\n    return true;\n  }\n\n  if (e.keyCode === _constants.RETURN && selectHintOnEnter) {\n    return true;\n  }\n\n  return false;\n}"]},"metadata":{},"sourceType":"script"}