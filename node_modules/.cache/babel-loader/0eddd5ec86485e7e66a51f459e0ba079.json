{"ast":null,"code":"'use strict';\n/*!\n * imports.\n */\n\nvar bind = Function.prototype.bind || require('fast-bind');\n/*!\n * exports.\n */\n\n\nmodule.exports = curry2;\n/**\n * Curry a binary function.\n *\n * @param {Function} fn\n * Binary function to curry.\n *\n * @param {Object} [self]\n * Function `this` context.\n *\n * @return {Function|*}\n * If partially applied, return unary function, otherwise, return result of full application.\n */\n\nfunction curry2(fn, self) {\n  var out = function () {\n    if (arguments.length === 0) return out;\n    return arguments.length > 1 ? fn.apply(self, arguments) : bind.call(fn, self, arguments[0]);\n  };\n\n  out.uncurry = function uncurry() {\n    return fn;\n  };\n\n  return out;\n}","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/curry2/index.js"],"names":["bind","Function","prototype","require","module","exports","curry2","fn","self","out","arguments","length","apply","call","uncurry"],"mappings":"AAAA;AAEA;;;;AAIA,IAAIA,IAAI,GAAGC,QAAQ,CAACC,SAAT,CAAmBF,IAAnB,IAA2BG,OAAO,CAAC,WAAD,CAA7C;AAEA;;;;;AAIAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AAEA;;;;;;;;;;;;;AAaA,SAASA,MAAT,CAAiBC,EAAjB,EAAqBC,IAArB,EAA2B;AACzB,MAAIC,GAAG,GAAG,YAAY;AACpB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B,OAAOF,GAAP;AAE5B,WAAOC,SAAS,CAACC,MAAV,GAAmB,CAAnB,GACHJ,EAAE,CAACK,KAAH,CAASJ,IAAT,EAAeE,SAAf,CADG,GAEHV,IAAI,CAACa,IAAL,CAAUN,EAAV,EAAcC,IAAd,EAAoBE,SAAS,CAAC,CAAD,CAA7B,CAFJ;AAGD,GAND;;AAQAD,EAAAA,GAAG,CAACK,OAAJ,GAAc,SAASA,OAAT,GAAoB;AAChC,WAAOP,EAAP;AACD,GAFD;;AAIA,SAAOE,GAAP;AACD","sourcesContent":["'use strict'\n\n/*!\n * imports.\n */\n\nvar bind = Function.prototype.bind || require('fast-bind')\n\n/*!\n * exports.\n */\n\nmodule.exports = curry2\n\n/**\n * Curry a binary function.\n *\n * @param {Function} fn\n * Binary function to curry.\n *\n * @param {Object} [self]\n * Function `this` context.\n *\n * @return {Function|*}\n * If partially applied, return unary function, otherwise, return result of full application.\n */\n\nfunction curry2 (fn, self) {\n  var out = function () {\n    if (arguments.length === 0) return out\n\n    return arguments.length > 1\n      ? fn.apply(self, arguments)\n      : bind.call(fn, self, arguments[0])\n  }\n\n  out.uncurry = function uncurry () {\n    return fn\n  }\n\n  return out\n}\n"]},"metadata":{},"sourceType":"script"}