{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _getOptionLabel = _interopRequireDefault(require(\"./getOptionLabel\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction addCustomOption(results, props) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey,\n      text = props.text;\n\n  if (!allowNew || !text.trim()) {\n    return false;\n  } // If the consumer has provided a callback, use that to determine whether or\n  // not to add the custom option.\n\n\n  if (typeof allowNew === 'function') {\n    return allowNew(results, props);\n  } // By default, don't add the custom option if there is an exact text match\n  // with an existing option.\n\n\n  return !results.some(function (o) {\n    return (0, _getOptionLabel[\"default\"])(o, labelKey) === text;\n  });\n}\n\nvar _default = addCustomOption;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-bootstrap-typeahead/lib/utils/addCustomOption.js"],"names":["Object","defineProperty","exports","value","_getOptionLabel","_interopRequireDefault","require","obj","__esModule","addCustomOption","results","props","allowNew","labelKey","text","trim","some","o","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,eAAe,GAAGC,sBAAsB,CAACC,OAAO,CAAC,kBAAD,CAAR,CAA5C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;;AAEjG,SAASE,eAAT,CAAyBC,OAAzB,EAAkCC,KAAlC,EAAyC;AACvC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,IAAI,GAAGH,KAAK,CAACG,IAFjB;;AAIA,MAAI,CAACF,QAAD,IAAa,CAACE,IAAI,CAACC,IAAL,EAAlB,EAA+B;AAC7B,WAAO,KAAP;AACD,GAPsC,CAOrC;AACF;;;AAGA,MAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAClC,WAAOA,QAAQ,CAACF,OAAD,EAAUC,KAAV,CAAf;AACD,GAbsC,CAarC;AACF;;;AAGA,SAAO,CAACD,OAAO,CAACM,IAAR,CAAa,UAAUC,CAAV,EAAa;AAChC,WAAO,CAAC,GAAGb,eAAe,CAAC,SAAD,CAAnB,EAAgCa,CAAhC,EAAmCJ,QAAnC,MAAiDC,IAAxD;AACD,GAFO,CAAR;AAGD;;AAED,IAAII,QAAQ,GAAGT,eAAf;AACAP,OAAO,CAAC,SAAD,CAAP,GAAqBgB,QAArB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _getOptionLabel = _interopRequireDefault(require(\"./getOptionLabel\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction addCustomOption(results, props) {\n  var allowNew = props.allowNew,\n      labelKey = props.labelKey,\n      text = props.text;\n\n  if (!allowNew || !text.trim()) {\n    return false;\n  } // If the consumer has provided a callback, use that to determine whether or\n  // not to add the custom option.\n\n\n  if (typeof allowNew === 'function') {\n    return allowNew(results, props);\n  } // By default, don't add the custom option if there is an exact text match\n  // with an existing option.\n\n\n  return !results.some(function (o) {\n    return (0, _getOptionLabel[\"default\"])(o, labelKey) === text;\n  });\n}\n\nvar _default = addCustomOption;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}