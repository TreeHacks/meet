{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setRef = exports.shallowEqual = exports.safeInvoke = exports.unwrapArray = void 0;\n/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */\n\nvar unwrapArray = function unwrapArray(arg) {\n  return Array.isArray(arg) ? arg[0] : arg;\n};\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */\n\n\nexports.unwrapArray = unwrapArray;\n\nvar safeInvoke = function safeInvoke(fn) {\n  if (typeof fn === \"function\") {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return fn.apply(void 0, args);\n  }\n};\n/**\n * Does a shallow equality check of two objects by comparing the reference\n * equality of each value.\n */\n\n\nexports.safeInvoke = safeInvoke;\n\nvar shallowEqual = function shallowEqual(objA, objB) {\n  var aKeys = Object.keys(objA);\n  var bKeys = Object.keys(objB);\n\n  if (bKeys.length !== aKeys.length) {\n    return false;\n  }\n\n  for (var i = 0; i < bKeys.length; i++) {\n    var key = aKeys[i];\n\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Sets a ref using either a ref callback or a ref object\n */\n\n\nexports.shallowEqual = shallowEqual;\n\nvar setRef = function setRef(ref, node) {\n  // if its a function call it\n  if (typeof ref === \"function\") {\n    return safeInvoke(ref, node);\n  } // otherwise we should treat it as a ref object\n  else if (ref != null) {\n      ref.current = node;\n    }\n};\n\nexports.setRef = setRef;","map":{"version":3,"sources":["/Users/lucaspauker/projects/treehacks/meet/node_modules/react-popper/lib/cjs/utils.js"],"names":["Object","defineProperty","exports","value","setRef","shallowEqual","safeInvoke","unwrapArray","arg","Array","isArray","fn","_len","arguments","length","args","_key","apply","objA","objB","aKeys","keys","bKeys","i","key","ref","node","current"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,MAAR,GAAiBF,OAAO,CAACG,YAAR,GAAuBH,OAAO,CAACI,UAAR,GAAqBJ,OAAO,CAACK,WAAR,GAAsB,KAAK,CAAxF;AAEA;;;;;AAIA,IAAIA,WAAW,GAAG,SAASA,WAAT,CAAqBC,GAArB,EAA0B;AAC1C,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,IAAqBA,GAAG,CAAC,CAAD,CAAxB,GAA8BA,GAArC;AACD,CAFD;AAGA;;;;;;AAMAN,OAAO,CAACK,WAAR,GAAsBA,WAAtB;;AAEA,IAAID,UAAU,GAAG,SAASA,UAAT,CAAoBK,EAApB,EAAwB;AACvC,MAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AAC5B,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIN,KAAJ,CAAUG,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAApC,EAAwEI,IAAI,GAAG,CAApF,EAAuFA,IAAI,GAAGJ,IAA9F,EAAoGI,IAAI,EAAxG,EAA4G;AAC1GD,MAAAA,IAAI,CAACC,IAAI,GAAG,CAAR,CAAJ,GAAiBH,SAAS,CAACG,IAAD,CAA1B;AACD;;AAED,WAAOL,EAAE,CAACM,KAAH,CAAS,KAAK,CAAd,EAAiBF,IAAjB,CAAP;AACD;AACF,CARD;AASA;;;;;;AAMAb,OAAO,CAACI,UAAR,GAAqBA,UAArB;;AAEA,IAAID,YAAY,GAAG,SAASA,YAAT,CAAsBa,IAAtB,EAA4BC,IAA5B,EAAkC;AACnD,MAAIC,KAAK,GAAGpB,MAAM,CAACqB,IAAP,CAAYH,IAAZ,CAAZ;AACA,MAAII,KAAK,GAAGtB,MAAM,CAACqB,IAAP,CAAYF,IAAZ,CAAZ;;AAEA,MAAIG,KAAK,CAACR,MAAN,KAAiBM,KAAK,CAACN,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACR,MAA1B,EAAkCS,CAAC,EAAnC,EAAuC;AACrC,QAAIC,GAAG,GAAGJ,KAAK,CAACG,CAAD,CAAf;;AAEA,QAAIL,IAAI,CAACM,GAAD,CAAJ,KAAcL,IAAI,CAACK,GAAD,CAAtB,EAA6B;AAC3B,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAjBD;AAkBA;;;;;AAKAtB,OAAO,CAACG,YAAR,GAAuBA,YAAvB;;AAEA,IAAID,MAAM,GAAG,SAASA,MAAT,CAAgBqB,GAAhB,EAAqBC,IAArB,EAA2B;AACtC;AACA,MAAI,OAAOD,GAAP,KAAe,UAAnB,EAA+B;AAC7B,WAAOnB,UAAU,CAACmB,GAAD,EAAMC,IAAN,CAAjB;AACD,GAFD,CAEE;AAFF,OAGK,IAAID,GAAG,IAAI,IAAX,EAAiB;AAClBA,MAAAA,GAAG,CAACE,OAAJ,GAAcD,IAAd;AACD;AACJ,CARD;;AAUAxB,OAAO,CAACE,MAAR,GAAiBA,MAAjB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setRef = exports.shallowEqual = exports.safeInvoke = exports.unwrapArray = void 0;\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */\nvar unwrapArray = function unwrapArray(arg) {\n  return Array.isArray(arg) ? arg[0] : arg;\n};\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */\n\n\nexports.unwrapArray = unwrapArray;\n\nvar safeInvoke = function safeInvoke(fn) {\n  if (typeof fn === \"function\") {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return fn.apply(void 0, args);\n  }\n};\n/**\n * Does a shallow equality check of two objects by comparing the reference\n * equality of each value.\n */\n\n\nexports.safeInvoke = safeInvoke;\n\nvar shallowEqual = function shallowEqual(objA, objB) {\n  var aKeys = Object.keys(objA);\n  var bKeys = Object.keys(objB);\n\n  if (bKeys.length !== aKeys.length) {\n    return false;\n  }\n\n  for (var i = 0; i < bKeys.length; i++) {\n    var key = aKeys[i];\n\n    if (objA[key] !== objB[key]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Sets a ref using either a ref callback or a ref object\n */\n\n\nexports.shallowEqual = shallowEqual;\n\nvar setRef = function setRef(ref, node) {\n  // if its a function call it\n  if (typeof ref === \"function\") {\n    return safeInvoke(ref, node);\n  } // otherwise we should treat it as a ref object\n  else if (ref != null) {\n      ref.current = node;\n    }\n};\n\nexports.setRef = setRef;"]},"metadata":{},"sourceType":"script"}